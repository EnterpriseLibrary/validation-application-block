<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CategoryValidation" xml:space="preserve">
    <value>Validation</value>
  </data>
  <data name="DescriptionEnabled" xml:space="preserve">
    <value>The enablement status for the control.</value>
  </data>
  <data name="DescriptionErrorProvider" xml:space="preserve">
    <value>The error provider to which error messages should be logged.</value>
  </data>
  <data name="DescriptionPerformValidation" xml:space="preserve">
    <value>Indicates whether automatic validation should be performed for this component when the Validating event is fired.</value>
  </data>
  <data name="DescriptionRuleset" xml:space="preserve">
    <value>The ruleset for validation rules (empty to use the default ruleset).</value>
  </data>
  <data name="DescriptionSourcePropertyName" xml:space="preserve">
    <value>The name of the property on the source type for which validation information should be retrieved to validate the value for this componen.</value>
  </data>
  <data name="DescriptionSourceType" xml:space="preserve">
    <value>The type for which validation information should be retrieved.</value>
  </data>
  <data name="DescriptionSpecificationSource" xml:space="preserve">
    <value>The source for validation specifications.</value>
  </data>
  <data name="DescriptionValidatedProperty" xml:space="preserve">
    <value>The name of the property on this component from where the value to be validated should be extracted.</value>
  </data>
  <data name="DescriptionValidationResultFormat" xml:space="preserve">
    <value>The format to show validation results. Use {0} for the message, {1} for the key, and {2} for the tag.</value>
  </data>
  <data name="ExceptionControlNotExtended" xml:space="preserve">
    <value>The supplied control has not been extended.</value>
  </data>
  <data name="ExceptionInvalidSourceTypeName" xml:space="preserve">
    <value>The source type does not represent a valid type for validation provider.</value>
  </data>
  <data name="ExceptionNoSourceProperty" xml:space="preserve">
    <value>No source property has been defined for validated control.</value>
  </data>
  <data name="ExceptionNoSourceTypeName" xml:space="preserve">
    <value>No source type has been defined for the validation provider.</value>
  </data>
  <data name="ExceptionValidatedControlPropertyNotFound" xml:space="preserve">
    <value>The property "{0}" specified to retrieve the value from control "{1}" does not exist or is not accessible.</value>
  </data>
  <data name="ExceptionValueAccessPropertyNotFound" xml:space="preserve">
    <value>The property "{0}" has not been mapped to any control.</value>
  </data>
  <data name="ExceptionValueAccessRequiresValidatedControlItem" xml:space="preserve">
    <value>This value access only works on ValidatedControlItems.</value>
  </data>
</root>